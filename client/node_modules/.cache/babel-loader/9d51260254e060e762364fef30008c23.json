{"ast":null,"code":"import axios from \"axios\";\n/**\n * Private function to get all of an entity\n * @param {String} entity API Path/Entity \n */\n\nfunction _getAll(entity) {\n  return axios.get(`/api/${entity}/`);\n}\n/**\n * Private function to get a single entity by id\n * @param {String} entity API Path/Entity \n * @param {Integer} id Id to find by\n */\n\n\nfunction _getOne(entity, id) {\n  return axios.get(`/api/${entity}/${id}`);\n}\n/**\n * Private function to delete a single entity by id\n * @param {String} entity API Path/Entity \n * @param {Integer} id Id to delete\n */\n\n\nfunction _delete(entity, id) {\n  return axios.delete(`/api/${entity}/${id}`);\n}\n/**\n * Private function to create a single entity\n * @param {String} entity entity API Path/Entity \n * @param {Object} data data to create an entity by\n */\n\n\nfunction _create(entity, data) {\n  return axios.post(`/api/${entity}/`, data);\n}\n/**\n * Private function to update a single entity\n * @param {String} entity entity API Path/Entity \n * @param {Integer} id Id of the entity\n * @param {Object} data data to update an entity by\n */\n\n\nfunction _update(id, entity, data) {\n  return axios.post(`/api/${entity}/${id}`, data);\n}\n\nexport default {\n  Book: {\n    getAll: function () {\n      return _getAll(\"books\");\n    },\n    getById: function (id) {\n      return _getOne(\"books\", id);\n    },\n    delete: function (id) {\n      return _delete(\"books\", id);\n    },\n    create: function (data) {\n      return _create(\"books\", data);\n    },\n    update: function (id, data) {\n      return _update(\"books\", id, data);\n    }\n  },\n  Author: {\n    getAll: function () {\n      return _getAll(\"authors\");\n    },\n    getById: function (id) {\n      return _getOne(\"authors\", id);\n    },\n    delete: function (id) {\n      return _delete(\"authors\", id);\n    },\n    create: function (data) {\n      return _create(\"authors\", data);\n    },\n    update: function (id, data) {\n      return _update(\"authors\", id, data);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/admin/Bootcamp/Homework/googleBookSearch/client/src/utils/API.js"],"names":["axios","_getAll","entity","get","_getOne","id","_delete","delete","_create","data","post","_update","Book","getAll","getById","create","update","Author"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA;;;;;AAIA,SAASC,OAAT,CAAiBC,MAAjB,EAAwB;AACpB,SAAOF,KAAK,CAACG,GAAN,CAAW,QAAOD,MAAO,GAAzB,CAAP;AACH;AAED;;;;;;;AAKA,SAASE,OAAT,CAAiBF,MAAjB,EAAyBG,EAAzB,EAA4B;AACxB,SAAOL,KAAK,CAACG,GAAN,CAAW,QAAOD,MAAO,IAAGG,EAAG,EAA/B,CAAP;AACH;AAED;;;;;;;AAKA,SAASC,OAAT,CAAiBJ,MAAjB,EAAyBG,EAAzB,EAA4B;AACxB,SAAOL,KAAK,CAACO,MAAN,CAAc,QAAOL,MAAO,IAAGG,EAAG,EAAlC,CAAP;AACH;AAED;;;;;;;AAKA,SAASG,OAAT,CAAiBN,MAAjB,EAAyBO,IAAzB,EAA8B;AAC1B,SAAOT,KAAK,CAACU,IAAN,CAAY,QAAOR,MAAO,GAA1B,EAA8BO,IAA9B,CAAP;AACH;AAED;;;;;;;;AAMA,SAASE,OAAT,CAAiBN,EAAjB,EAAqBH,MAArB,EAA6BO,IAA7B,EAAkC;AAC9B,SAAOT,KAAK,CAACU,IAAN,CAAY,QAAOR,MAAO,IAAGG,EAAG,EAAhC,EAAmCI,IAAnC,CAAP;AACH;;AAGD,eAAe;AAEXG,EAAAA,IAAI,EAAE;AACFC,IAAAA,MAAM,EAAE,YAAY;AAChB,aAAOZ,OAAO,CAAC,OAAD,CAAd;AACH,KAHC;AAIFa,IAAAA,OAAO,EAAE,UAAUT,EAAV,EAAc;AACnB,aAAOD,OAAO,CAAC,OAAD,EAAUC,EAAV,CAAd;AACH,KANC;AAOFE,IAAAA,MAAM,EAAE,UAAUF,EAAV,EAAc;AAClB,aAAOC,OAAO,CAAC,OAAD,EAAUD,EAAV,CAAd;AACH,KATC;AAUFU,IAAAA,MAAM,EAAE,UAASN,IAAT,EAAc;AAClB,aAAOD,OAAO,CAAC,OAAD,EAAUC,IAAV,CAAd;AACH,KAZC;AAaFO,IAAAA,MAAM,EAAE,UAASX,EAAT,EAAaI,IAAb,EAAkB;AACtB,aAAOE,OAAO,CAAC,OAAD,EAAUN,EAAV,EAAcI,IAAd,CAAd;AACH;AAfC,GAFK;AAmBXQ,EAAAA,MAAM,EAAE;AACJJ,IAAAA,MAAM,EAAE,YAAY;AAChB,aAAOZ,OAAO,CAAC,SAAD,CAAd;AACH,KAHG;AAIJa,IAAAA,OAAO,EAAE,UAAUT,EAAV,EAAc;AACnB,aAAOD,OAAO,CAAC,SAAD,EAAYC,EAAZ,CAAd;AACH,KANG;AAOJE,IAAAA,MAAM,EAAE,UAAUF,EAAV,EAAc;AAClB,aAAOC,OAAO,CAAC,SAAD,EAAYD,EAAZ,CAAd;AACH,KATG;AAUJU,IAAAA,MAAM,EAAE,UAASN,IAAT,EAAc;AAClB,aAAOD,OAAO,CAAC,SAAD,EAAYC,IAAZ,CAAd;AACH,KAZG;AAaJO,IAAAA,MAAM,EAAE,UAASX,EAAT,EAAaI,IAAb,EAAkB;AACtB,aAAOE,OAAO,CAAC,SAAD,EAAYN,EAAZ,EAAgBI,IAAhB,CAAd;AACH;AAfG;AAnBG,CAAf","sourcesContent":["import axios from \"axios\";\n\n/**\n * Private function to get all of an entity\n * @param {String} entity API Path/Entity \n */\nfunction _getAll(entity){\n    return axios.get(`/api/${entity}/`);\n}\n\n/**\n * Private function to get a single entity by id\n * @param {String} entity API Path/Entity \n * @param {Integer} id Id to find by\n */\nfunction _getOne(entity, id){\n    return axios.get(`/api/${entity}/${id}`);\n}\n\n/**\n * Private function to delete a single entity by id\n * @param {String} entity API Path/Entity \n * @param {Integer} id Id to delete\n */\nfunction _delete(entity, id){\n    return axios.delete(`/api/${entity}/${id}`);\n}\n\n/**\n * Private function to create a single entity\n * @param {String} entity entity API Path/Entity \n * @param {Object} data data to create an entity by\n */\nfunction _create(entity, data){\n    return axios.post(`/api/${entity}/`, data);\n}\n\n/**\n * Private function to update a single entity\n * @param {String} entity entity API Path/Entity \n * @param {Integer} id Id of the entity\n * @param {Object} data data to update an entity by\n */\nfunction _update(id, entity, data){\n    return axios.post(`/api/${entity}/${id}`, data);\n}\n\n\nexport default {\n    \n    Book: {\n        getAll: function () {\n            return _getAll(\"books\");\n        },\n        getById: function (id) {\n            return _getOne(\"books\", id);\n        },\n        delete: function (id) {\n            return _delete(\"books\", id);\n        },\n        create: function(data){\n            return _create(\"books\", data);\n        },\n        update: function(id, data){\n            return _update(\"books\", id, data);\n        }\n    },\n    Author: {\n        getAll: function () {\n            return _getAll(\"authors\");\n        },\n        getById: function (id) {\n            return _getOne(\"authors\", id);\n        },\n        delete: function (id) {\n            return _delete(\"authors\", id);\n        },\n        create: function(data){\n            return _create(\"authors\", data);\n        },\n        update: function(id, data){\n            return _update(\"authors\", id, data);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}